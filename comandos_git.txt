Comandos GIT
============


Configurar usuario para GIT:
	git config --global user.name "Nombre_a_ingresar"
	git config --global user.email "correo.dominio.com"


Crear un directorio GIT:
	mkdir Mi_directorio_git
	git init
(al crear el directorio GIT, se creará un archivo oculto .git)

Clonar un repositorio existen (URL):
	git clone https://github.com/usuario/repositorio

(Para crear archivos se hace con el editor de texto correspondiente)





Staging Index (commit)
======================

Staging index (área temporal donde se añaden archivos con cambios que se enviarán a Git)
Añadir archivo a staging index:
	git add "Nombre_del_archivo"

(Si se quiere agregar todos los archivos del directorio, se ejecuta: git add .)

Eliminar un "add"
	git reset -- "Nombre_del_archivo"

Ver el estado de los archivos que están añadidos, eliminados o pendientes de commit.
	git status

Enviar commit por archivo:
	git commit nombre_del_archivo
(Al ejecutarse se abrirá un archivo en el cual se podrá escribir el título del commit y
una descripción)

Agregar título al commit:
	git commit -m "Título del commit" nombre_del_archivo

Borrar archivos que estén en el staging index:
	git rm "Nombre_del_archivo"
(Posteriormente se hace un commit para informar que se borró el archivo)





LOGS
====

El log de git mostrará los commit realizados en el proyecto; su autor, fecha; comentario, ID, entre ortas cosas.
Cada commit tiene un ID único, este código sirve para recuperar un archivo o ver que cambios se realizaron en ese punto.

Historial de commit realizados:
	git log
	o
	git log --all


Para ver el log de una manera más compacta:
	git log --oneline
	o
	git log --oneline --decorate


Para ver los últimos 5 commits:
	git log -5


Para ver commits de un autor:
	git log --author nombre_del_autor


Para ver commits des hace cierta cantidad de días:
	git log --before
	o
	git log --after

Ej:
	git log --before 5.days.ago


Para ver el diff de cada commit:
	git log -p
	o
	git log -p id_commit

	
Revisar un commit en particular:
	git log --oneline (para obtener el código del commit)
	git checkout id_commit nombre_del_archivo

Se irá al commit que se hizo en ese punto del tiempo al archivo indicado.





Volver atrás cambios
=====================

Si se quiere recuperar el archivo basta con añadirlo al staging index y hace un commit nuevo.
	git checkout id_commit nombre_del_archivo
	git add nombre_del_archivo
	git commit nombre_del_archivo

################
## IMPORTANTE ##
################

Es importante tener en cuenta que si se ejecuta un checkout a un ID de commit sin su archivo, se creará una rama temporal que puede modificar todo el proyecto.
Ejemplo:
	Si en un comienzo teníamos 3 archivos y con el tiempo creamos un total de 10 en nuestro proyecto, corremos el riesgo de que si volvemos a un punto inicial
	y hacemos un commit, volveremos a tener los 3 arhivos iniciales y el resto se perderá.

		git checkout 6m2h4y95h248hq72vcb12
	
	Esto hará volver al punto solicitado y se creará una rama temporal llamada "6m2h4y95h248hq72vcb12"
	Si posterior a esto hacemos un commit y un push nos quedaremos trabajando con la información de esa rama temporal.


Para salir del commit revisado:
	git checkout "nombre_de_la_rama"
(Con esto volveremos al tiempo actual)





RAMAS:
======

Crear ramas 
Sirve para trabajos en paralelo sobre mismos archivos, de esta manera no se mezclaran los commit de distintas personas.

Rama_Master__
             \__Rama_user_1-->archivo
             \__Rama_user_2-->archivo
             \__Rama_user_3-->archivo


Los repositorios remotos tienen sus propias ramas, al igual que las locales pero se llaman "origin/nombre_de_la_rama"
Por ejemplo, localmente podemos tener la rama "master" y al revisar con el comando "git branch --all" veremos que
mostrará además de las ramas locales, las remotas.

Ejemplo:

	$git branch --all
  	Desarrollo
  	cone_git_console
	* master
  	remotes/origin/Desarrollo
  	remotes/origin/HEAD -> origin/master
  	remotes/origin/cone_git_console
  	remotes/origin/master

(La rama marcada con un "*" indica que es la rama en la que se está trabajando)



Creación de rama:
	git branch nombre_de_la_rama


Crear rama y cambiarse automáticamente a ella_
	git checkout -b nombre_de_la_rama


Ver las ramas: 
	git branch


Ver las ramas locales y las remotas:
	git branch -all


Cambiarse a otra rama:
	git checkout "nombre_de_la_rama"


Crear una rama y cambiarse automáticamente a ella
	git checkout -b "nombre_de_la_rama"


Borrar una rama:
	git branch -d "nombre_de_la_rama"


Fucionar Ramas (nos vamos a la rama a la cual se le quiere añadir el cambio):
	git merge "nombre_de_la_rama"





TAGS
====

Los TAGS se crean para identificar mejor un commit, sin tener que buscar su código desde el log.
Conveniente para dejar un pequeño comentario y saber que se hizo, o la fecha.


Para ver los tags creados:
	git tag


Para crear tags en el commit actual usamos:
	git tag "nombre_del_tag"


Para crear un tag de un commit ya realizado:
1.- Buscar el código del commit:
	git log --oneline

2.- Agregar un tag al commit: 
	git tag nombre_del_tag código_commit


Para ir a un commit desde un tag (mismo que ver un commit en particular):
	git checkout nombre_del_tag





Push
====

Para enviar los cambios realizados en un proyecto, se utiliza push a sus repositorios remotos.
Si el proyecto tiene cambio de varias personas, se recomienda tener un repositorio central.

Para agregar repositorios remotos se ejecuta:
	git remote add origin dirección_remota (puede ser una url de github)

(Clonar un repositorio es lo mismo)


Para enviar los cambios al repositorio remoto:
	git push origin nombre_de_la_rama_local

(Se recomienda realizar un "git pull" antes de un "git push" esto en caso de que alguien haya modificado el repositorio
ya que, de otra manera al hacer un "git push" dará un error)



Pull
====

Sincronizar cambios de un repositorio remoto (origin)
=====================================================

Si queremos descargar commits que se hayan hecho en repositorios remotos al nuestro (local) usamos:

	git pull origin nombre_de_la_rama

(se recomienda hacer pull antes de hacer cambios, esto para trabajar con la última versión del repositorio)

